"""
Tools Visualizer

This module provides functionality to visualize tool definitions
in a structured, tree-like format with enhanced styling.
"""

from datetime import datetime, timezone
from typing import Any, Dict, List

from .base import BaseVisualizer, Colors, Icons


class ToolsVisualizer(BaseVisualizer):
    """Class to visualize tool definitions in a structured format."""

    def visualize_tools(self, tools: List[Dict[str, Any]]) -> str:
        """Display a fancy summary of all processed tool definitions with enhanced styling.

        Args:
            tools: List of tool definition dictionaries
            title: Title to display in the header

        Returns:
            A string containing the formatted tool definitions
        """
        result: List[str] = []

        # Add header
        self._add_header(result)

        # Handle empty tools case
        if not tools:
            self._add_no_tools_message(result)
            return "\n".join(result)

        # Add each tool
        for i, tool in enumerate(tools, 1):
            is_last_tool = i == len(tools)
            self._add_tool_visualization(result, tool, is_last_tool)

        return "\n".join(result)

    def save_tools_visualization(self, tools: List[Dict[str, Any]], output_file: str) -> None:
        """Save tools visualization to a file.

        Args:
            tools: List of tool definition dictionaries
            output_file: Path to the output file
            title: Title to display in the header
        """
        visualization = self.visualize_tools(tools)
        clean_visualization = self._strip_ansi_codes(visualization)

        # Add markdown header with timestamp
        md_content = f"""# ðŸ”§ Tools Visualization
## Universal Orchestration Agent

**Generated:** {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC')}

---

```
{clean_visualization}
```

---

*Generated by Universal Transformation Orchestration Agent (UTOA)*  
"""
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(md_content)
        print(self._colorize(f"âœ… Tools visualization saved to {output_file}", Colors.GREEN))

    def _add_header(self, result: List[str]) -> None:
        """Add the header section to the visualization.

        Args:
            result: List to append header lines to
            title: Title to display in the header
        """
        result.append(f"{self._colorize('=' * 80, Colors.MAGENTA)}")
        header_text = f"{self._iconize(Icons.TOOLS_HEADER)}PROCESSED TOOL DEFINITIONS"
        result.append(f"{self._colorize(header_text, Colors.MAGENTA)}")
        result.append(f"{self._colorize('=' * 80, Colors.MAGENTA)}")

    def _add_no_tools_message(self, result: List[str]) -> None:
        """Add the no tools available message.

        Args:
            result: List to append the message to
        """
        no_tools_text = f"{self._iconize(Icons.NO_TOOLS)}No processed tools available."
        result.append(f"\n{self._colorize(no_tools_text, Colors.YELLOW)}")

    def _add_tool_visualization(
        self, result: List[str], tool: Dict[str, Any], is_last_tool: bool
    ) -> None:
        """Add visualization for a single tool.

        Args:
            result: List to append tool visualization to
            tool: Tool definition dictionary
            is_last_tool: Whether this is the last tool in the list
        """
        indent = self._get_tool_indent(is_last_tool)

        # Add tool header and basic info
        self._add_tool_header(result, tool, is_last_tool)
        self._add_tool_description(result, tool, indent)
        self._add_tool_resource(result, tool, indent)

        # Add tool sections
        self._add_parameters_section(result, tool, indent)
        self._add_returns_section(result, tool, indent)

    def _get_tool_indent(self, is_last_tool: bool) -> str:
        """Get the appropriate indentation for tool content.

        Args:
            is_last_tool: Whether this is the last tool in the list

        Returns:
            The indentation string
        """
        return "    " if is_last_tool else "â”‚   "

    def _add_tool_header(self, result: List[str], tool: Dict[str, Any], is_last_tool: bool) -> None:
        """Add the tool header with name.

        Args:
            result: List to append header to
            tool: Tool definition dictionary
            is_last_tool: Whether this is the last tool in the list
        """
        tool_prefix = "â””â”€â”€" if is_last_tool else "â”œâ”€â”€"
        header_line = f"\n{self._colorize(tool_prefix, Colors.CYAN)}{self._iconize(Icons.TOOL_ITEM)}{self._colorize(tool['name'], Colors.CYAN + Colors.BOLD)}"
        result.append(header_line)

    def _add_tool_description(self, result: List[str], tool: Dict[str, Any], indent: str) -> None:
        """Add the tool description.

        Args:
            result: List to append description to
            tool: Tool definition dictionary
            indent: Indentation string
        """
        description_line = f"{self._colorize(indent + tool['description'], Colors.WHITE)}"
        result.append(description_line)

    def _add_tool_resource(self, result: List[str], tool: Dict[str, Any], indent: str) -> None:
        """Add the tool resource.

        Args:
            result: List to append resource to
            tool: Tool definition dictionary
            indent: Indentation string
        """
        resource = tool.get("resource", "N/A")
        resource_text = f"{indent}Resource: {resource}"
        result.append(f"{self._colorize(resource_text, Colors.YELLOW)}")

    def _add_parameters_section(self, result: List[str], tool: Dict[str, Any], indent: str) -> None:
        """Add the parameters section for a tool.

        Args:
            result: List to append parameters to
            tool: Tool definition dictionary
            indent: Indentation string
        """
        parameters = tool.get("parameters", [])
        if parameters:
            params_header = (
                f"{indent}{self._iconize(Icons.PARAMETERS)}Parameters ({len(parameters)}):"
            )
            result.append(f"{self._colorize(params_header, Colors.MAGENTA)}")

            for j, param in enumerate(parameters):
                is_last_param = j == len(parameters) - 1
                self._add_parameter_details(result, param, indent, is_last_param)
        else:
            no_params_text = f"{indent}{self._iconize(Icons.PARAMETERS)}No parameters"
            result.append(f"{self._colorize(no_params_text, Colors.LIGHTBLACK_EX)}")

    def _add_parameter_details(
        self, result: List[str], param: Dict[str, Any], base_indent: str, is_last_param: bool
    ) -> None:
        """Add detailed information for a single parameter.

        Args:
            result: List to append parameter details to
            param: Parameter definition dictionary
            base_indent: Base indentation string
            is_last_param: Whether this is the last parameter
        """
        param_prefix = "â””â”€â”€" if is_last_param else "â”œâ”€â”€"
        param_indent = "    " if is_last_param else "â”‚   "

        # Parameter name with required/optional indicator
        self._add_parameter_name(result, param, base_indent, param_prefix)

        # Parameter details
        self._add_parameter_type(result, param, base_indent, param_indent)
        self._add_parameter_description(result, param, base_indent, param_indent)
        self._add_parameter_default(result, param, base_indent, param_indent)
        self._add_parameter_constraints(result, param, base_indent, param_indent)

    def _add_parameter_name(
        self, result: List[str], param: Dict[str, Any], base_indent: str, param_prefix: str
    ) -> None:
        """Add parameter name with required/optional indicator.

        Args:
            result: List to append parameter name to
            param: Parameter definition dictionary
            base_indent: Base indentation string
            param_prefix: Prefix for the parameter line
        """
        required = param.get("required", True)
        req_indicator = (
            f"{self._colorize(self._iconize(Icons.REQUIRED).strip(), Colors.RED)}"
            if required
            else f"{self._colorize(self._iconize(Icons.OPTIONAL).strip(), Colors.GREEN)}"
        )

        param_prefix_text = f"{base_indent}    {param_prefix}"
        param_name_line = f"{self._colorize(param_prefix_text, Colors.WHITE)} {req_indicator} {self._colorize(param['name'], Colors.WHITE + Colors.BOLD)}"
        result.append(param_name_line)

    def _add_parameter_type(
        self, result: List[str], param: Dict[str, Any], base_indent: str, param_indent: str
    ) -> None:
        """Add parameter type information.

        Args:
            result: List to append parameter type to
            param: Parameter definition dictionary
            base_indent: Base indentation string
            param_indent: Parameter-specific indentation
        """
        param_type = param.get("type", "unknown")
        type_color = self._get_type_color(param_type)
        param_type_text = f"{base_indent}    {param_indent}   Type: {param_type}"
        result.append(f"{self._colorize(param_type_text, type_color)}")

    def _add_parameter_description(
        self, result: List[str], param: Dict[str, Any], base_indent: str, param_indent: str
    ) -> None:
        """Add parameter description.

        Args:
            result: List to append parameter description to
            param: Parameter definition dictionary
            base_indent: Base indentation string
            param_indent: Parameter-specific indentation
        """
        param_desc = param.get("description", "No description")
        param_desc_text = f"{base_indent}    {param_indent}   {param_desc}"
        result.append(f"{self._colorize(param_desc_text, Colors.WHITE)}")

    def _add_parameter_default(
        self, result: List[str], param: Dict[str, Any], base_indent: str, param_indent: str
    ) -> None:
        """Add parameter default value if present.

        Args:
            result: List to append parameter default to
            param: Parameter definition dictionary
            base_indent: Base indentation string
            param_indent: Parameter-specific indentation
        """
        if "default_value" in param and param["default_value"] is not None:
            default_val = param["default_value"]
            default_text = f"{base_indent}    {param_indent}   Default: {default_val}"
            result.append(f"{self._colorize(default_text, Colors.LIGHTBLACK_EX)}")

    def _add_parameter_constraints(
        self, result: List[str], param: Dict[str, Any], base_indent: str, param_indent: str
    ) -> None:
        """Add parameter constraints if present.

        Args:
            result: List to append parameter constraints to
            param: Parameter definition dictionary
            base_indent: Base indentation string
            param_indent: Parameter-specific indentation
        """
        constraints = param.get("constraints", {})
        if constraints:
            constraint_parts = self._build_constraint_parts(constraints)
            if constraint_parts:
                constraints_text = (
                    f'{base_indent}    {param_indent}   Constraints: {", ".join(constraint_parts)}'
                )
                result.append(f"{self._colorize(constraints_text, Colors.LIGHTBLACK_EX)}")

    def _build_constraint_parts(self, constraints: Dict[str, Any]) -> List[str]:
        """Build list of constraint descriptions.

        Args:
            constraints: Constraints dictionary

        Returns:
            List of constraint description strings
        """
        constraint_parts = []
        if "min" in constraints:
            constraint_parts.append(f"min: {constraints['min']}")
        if "max" in constraints:
            constraint_parts.append(f"max: {constraints['max']}")
        if "pattern" in constraints:
            constraint_parts.append(f"pattern: {constraints['pattern']}")
        if "enum" in constraints:
            constraint_parts.append(f"enum: {constraints['enum']}")
        return constraint_parts

    def _add_returns_section(self, result: List[str], tool: Dict[str, Any], indent: str) -> None:
        """Add the returns section for a tool.

        Args:
            result: List to append returns section to
            tool: Tool definition dictionary
            indent: Indentation string
        """
        returns = tool.get("return", {})
        if returns:
            returns_header = f"{indent}{self._iconize(Icons.RETURNS)}Return:"
            result.append(f"{self._colorize(returns_header, Colors.GREEN)}")

            return_type = returns.get("type", "unknown")
            type_color = self._get_type_color(return_type)

            returns_type_text = f"{indent}    â””â”€â”€ Type: {return_type}"
            result.append(f"{self._colorize(returns_type_text, type_color)}")

            return_desc = returns.get("description", "No description")
            returns_desc_text = f"{indent}        {return_desc}"
            result.append(f"{self._colorize(returns_desc_text, Colors.WHITE)}")

    def _get_type_color(self, param_type: str) -> str:
        """Get the appropriate color for a parameter type.

        Args:
            param_type: The parameter type string

        Returns:
            The corresponding color code
        """
        type_colors = {
            "string": Colors.GREEN,
            "number": Colors.BLUE,
            "boolean": Colors.YELLOW,
            "object": Colors.MAGENTA,
            "array": Colors.CYAN,
        }
        return type_colors.get(param_type, Colors.WHITE)
