%%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#ADD8E6', 'primaryTextColor': '#000', 'primaryBorderColor': '#7FB3D5', 'lineColor': '#7FB3D5', 'secondaryColor': '#E8F4F8', 'tertiaryColor': '#fff'}}}%%

flowchart TD
    %% Core Workflow Structure
    subgraph CoreSection ["Workflow Input Schema"]
        WorkflowRoot["‚ö° <b>Workflow</b>
        ‚Ä¢ name: string
        ‚Ä¢ description: string
        ‚Ä¢ section_update: int
        ‚Ä¢ root: Containerüì¶"]
        
        Sequence["‚û§ <b>SequenceContainer</b>
        ‚Ä¢ type: sequence
        ‚Ä¢ steps: ContainerOrNode[]"]
        
        Parallel["‚´∏ <b>ParallelContainer</b>
        ‚Ä¢ type: parallel
        ‚Ä¢ branches: ContainerOrNode[]"]
    end
    
    %% Node Types Section
    subgraph NodeSection ["Node Types"]
        
        Branch["üîÄ <b>Branch</b>
        ‚Ä¢ condition: Condition
        ‚Ä¢ ifTrue: ContainerOrNode
        ‚Ä¢ ifFalse: ContainerOrNode"]
        
        Loop["üîÅ <b>Loop</b>
        ‚Ä¢ condition: Condition
        ‚Ä¢ body: ContainerOrNode
        ‚Ä¢ iterationVariable: string"]

        ToolCall["üõ†Ô∏è <b>ToolCall</b>
        ‚Ä¢ toolName: string
        ‚Ä¢ parameters: object
        ‚Ä¢ outputVariable: string"]
        
        WaitEvent["‚è∞ <b>WaitForEvent</b>
        ‚Ä¢ eventSource: string
        ‚Ä¢ entityId: string
        ‚Ä¢ onTimeout: ContainerOrNode"]
        
        UserInput["üë§ <b>UserInput</b>
        ‚Ä¢ prompt: string
        ‚Ä¢ inputType: enum
        ‚Ä¢ outputVariable: object"]
    end
    
    %% Condition Logic Section
    subgraph ConditionSection ["Condition Types"]
        
        Comparison["üü∞ <b>ComparisonCondition</b>
        ‚Ä¢ left: VariableReference
        ‚Ä¢ operator: string
        ‚Ä¢ right: VariableReference"]
        
        Logical["üßÆ <b>LogicalCondition</b>
        ‚Ä¢ type: logical
        ‚Ä¢ operator: [and, or]
        ‚Ä¢ conditions: Condition[]"]
    end
    
    %% Variable Reference Section
    subgraph VariableSection ["Variable Reference"]
        SingleVarRef["üîó <b>ConditionVarReference</b>
        {% $varName.property %}"]

        ParameterVarRef["ü™ù <b>ParameterVarReference</b>
        {% $var1 & ' ' & $var2 %}"]
    end
    
    %% Core Relationships
    WorkflowRoot --> Sequence
    WorkflowRoot --> Parallel
    
    CoreSection -->|contains| NodeSection
    
    %% Condition Relationships
    NodeSection -->|contains| ConditionSection
    NodeSection -->|uses| VariableSection
    
    %% Styling
    classDef coreStyle fill:#E8F4F8,stroke:#7FB3D5,stroke-width:2px,color:#000
    classDef containerStyle fill:#ADD8E6,stroke:#7FB3D5,stroke-width:2px,color:#000
    classDef nodeStyle fill:#B8E6B8,stroke:#7FB3D5,stroke-width:2px,color:#000
    classDef conditionStyle fill:#FFE4B5,stroke:#7FB3D5,stroke-width:2px,color:#000
    classDef variableStyle fill:#F0E68C,stroke:#7FB3D5,stroke-width:2px,color:#000
    
    %% Apply styles
    class WorkflowRoot,Interface coreStyle
    class Container,Sequence,Parallel containerStyle
    class Node,ToolCall,UserInput,Branch,Loop,WaitEvent nodeStyle
    class Condition,Comparison,Logical conditionStyle
    class SingleVarRef,ParameterVarRef variableStyle
    
    %% Subgraph styling
    style CoreSection fill:#F8FCFF,stroke:#7FB3D5,stroke-width:2px,color:#000,stroke-dasharray: 5 5
    %% style ContainerSection fill:#F0F8FF,stroke:#7FB3D5,stroke-width:2px,color:#000,stroke-dasharray: 5 5
    style NodeSection fill:#F5FFF5,stroke:#7FB3D5,stroke-width:2px,color:#000,stroke-dasharray: 5 5
    style ConditionSection fill:#FFF8E1,stroke:#7FB3D5,stroke-width:2px,color:#000,stroke-dasharray: 5 5
    style VariableSection fill:#FFFACD,stroke:#7FB3D5,stroke-width:2px,color:#000,stroke-dasharray: 5 5
